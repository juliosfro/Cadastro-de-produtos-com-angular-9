Curso de Angular 9 da Coder.
Criamos o projeto com o comando npm init -y
Vamos usar o Json Server: npm i json-server
Em scripts colocamos o seguinte:  "start": "json-server --watch db.json --port 3001"
Podemos rodar o Json Server dentro da pasta backend com o seguinte comando:
npm start
Podemos enviar todos os tipos de requisicoes para o Json Server atraves do navegador 
ou do Postman.

O Angular é um framework JavaScript desenvolvido pelo Google para criação de aplicacoes
web SPA (Single Page Aplication) baseada em componentes.

Command Line Interface (CLI), outros frameworks além do Angular também usam CLI.
Instalamos o CLI através do seguinte comando: npm i -g @angular/cli

- O TypeScript é uma linguagem criada pela Microsoft.
- Para criar um novo projeto usamos o comando: ng new NomeDoProjeto
- Colocaremos algumas flags no comando para criar o projeto.
- Uma outra questao é o uso padrão do TypeScript no Angular.
- O código em TypeScript será compilado para JavaScript de forma automática
pois o browser não entende TypeScript e sim apenas JavaScript.
- O TypeScript possuí tipagem forte que é uma de suas grandes características.
- No TypeScript podemos definir tipos associados as variáveis.
- Em JavaScript o tipo da variável é dinâmico, ou seja, uma variável pode receber
tanto um array, um boolean, uma string, um objeto e etc.
- Tudo que o JavaScript tem é suportado no TypeScript, sendo que o TypeScript coloca 
algumas funcionalidades a mais.
- Cada framework implementa os componentes de uma forma, por isso precisamos entender
sobre árvore de componentes.
- Começamos nossa aplicação através de um componente principal que será a raiz da aplicação
e através desse componente vamos referenciando outros componentes.
- Por default o componente principal do Angular se chama AppComponent que é o raíz da 
aplicação e através dele podemos referenciar outros como o Header, outro chamado 
Content para representar o conteúdo e assim por diante.
- Dentro do Header temos um componente de navegação chamado Nav.
- Dentro de Content (Conteúdo) podemos ter um componente chamado ContentTitle, outro 
chamado ProductCrud para representar o cadastro de produtos.
- Podemos ter um componente pai com vários componentes filhos.

Conceitos Essenciais do Angular

- Fluxo da Inicialização da aplicação.

- Depois que nosso projeto for criado existirá um arquivo chamado main.ts
- Nós vamos criar arquivos com a extensão .ts de TypeScript.
- Tudo que usamos no JavaScript podemos colocar dentro de um arquivo TypeScript.
- O arquivo main.ts é o primeiro a ser chamado para incializar a aplicação em Angular.
- O main.ts por sua vez chamará o módulo de nossa aplicação que se chama por default AppModule.
- A nossa aplicação em Angular será organizada através de componentes, ou seja, será uma grande
árvore de componentes.
- Os componentes são organizados dentro de módulos, ou seja, uma aplicação Angular é modularizada,
por sua vez esses módulos podem dar alguns poderes como por exemplo criar alguns componentes que
estejam visíveis apenas dentro do módulo, isso trás um maior nível de encapsulamento.
- O AppComponent é o componente que foi criado por padrão (default), a partir do AppComponent toda
a árvore de componentes será chamada.
- AppModule é o nome do módulo default que é criado junto com o projeto.

O que é um componente?
- Componente é um trecho de código que representa algo visual na nossa tela.
- Esse componente visual terá dentro de si, html, css e ts que será o seu comportamento.
- O componente terá comportamento que conseguiremos isso através do TypeScript.
- O componente terá estrutura que conseguiremos através do html.
- O componente terá estilo que conseguiremos através do css.
- Teremos em via de regra três arquivos, home.component.css, home.component.html e home.component.ts
- É possível termos tudo em um único arquivo mas vamos utilizar arquivos separados. 
- Quando criamos um componente é gerada uma tag personalizada, por exemplo <app-home></app-home>
- Através da tag podemos referenciar todo o código html, estilo e toda a lógica que colocamos 
dentro do arquivo ts, ou seja, referenciamos o componente em si.
- O componente é um trecho visual da aplicação front-end.
- Podemos referenciar componentes através de tags personalizadas.
- A partir do arquivo TypeScript é que o Angular vai encontrar tanto o html quanto o css.
- Dentro do arquivo ts do componente são feitas as referências para os outros arquivos, como
o html e o css.
- Com a junção de todos os arquivos referenciados dentro do arquivo ts é formado o componente.
- Um componente pode referenciar um ou mais componentes e assim por diante, dessa forma irá surgir
a árvore de componentes.
- Além de organizar a aplicação em componentes o Angular também organiza em módulos.
- É possível utilizar um único módulo para toda a aplicação.
- Podemos organizar a aplicação em diversos módulos.
- Quando criamos um componente dentro do módulo podemos escolher se ele ficará visível para fora do 
módulo, ou seja, alguém fora do módulo pode referenciar aquele componente ou se o componente ficará
visível apenas dentro do módulo.

Anatomia do módulo
- Dentro de um módulo temos cinco atributos, declarations, exports, imports, providers e bootstrap.
- Em declarations declaramos todos os componentes que fazem parte do módulo.
- Em declarations também declaramos as diretivas que fazem parte do módulo e também os pipes. 
- Quando dizemos que um componente faz parte do módulo não significa dizer que ele está visível
para fora do módulo.
- Para deixar um componente visível para fora do módulo é necessário utilizar o exports.
- O exports pode ser tudo o que colocamos em declarations ou parte daquilo que declaramos dentro
do módulo.
- O imports serve para importarmos outros módulos, ou seja, um módulo pode depender de outro
módulo.
- Em providers declaramos os services.
- Em bootstrap definimos o componente que será carregado no módulo.
- O bootstrap é necessário para dar o start no módulo inicial da aplicação fazendo com que o 
componente inicial seja carregado e esteja disponível para ser usado na Single Page Aplication.
- A dependência é de cima pra baixo na árvore de dependências.
- O componente referenciado precisa ser exportado, quem está fazendo a referência não.

Criando o App com o Angular CLI

- Através do Command Line Interface podemos criar tudo o que precisamos.
- Para cada componente criado dentro do angular é criado um prefixo, por padrão esse prefixo 
se chama app.
- Podemos escolher como ficará o prefixo de todos os componentes de nossa aplicação angular.
- Podemos definir o prefixo passando uma flag no momento da criação do projeto.
- Criamos nosso projeto de front-end com o comando: ng new frontend --minimal 
- A flag --minimal serve para criar o projeto somente com os arquivos básicos, sem arquivos
de teste por exemplo.
- Para rodar nossa aplicação frontend precisamos entrar dentro da pasta frontend e digitar
o comando npm start
- Por padrão o servidor do Angular inicia na porta 4200, http://localhost:4200/

Conhecendo os arquivos do projeto

- O arquivo tsconfig.json guarda as configurações de compilação do nosso projeto.
- Vamos fazer uma mudança no arquivo angular.json, onde está inlineTemplate definido
como true então vamos setá-lo como false.
- A opção inlineStyle no arquivo angular.json também vamos defini-lá como falso, 
ou seja, vamos setá-la como false. 
- Quando formos criar o componente o nosso html estará em um arquivo separado.
- O CSS que é o estilo também estará em um arquivo separado, pois definimos isso
no arquivo angular.json.
- Quando dizemos para criar inline significa que será criado um único arquivo, ou 
seja tanto o css quanto o html estarão presentes dentro do arquivo do typescript.
- Dentro da pasta src temos o arquivo main.ts que é a porta de entrada da aplicação.
- Em main.ts por default é carregado o AppModule que é o módulo padrão que é criado
junto com o projeto.
- A função do main.ts é carregar o módulo principal.
- Como mandamos criar nosso projeto com a flag --minimal então por default o html
ficou inline dentro do arquivo app.component.ts, dentro da pasta app em src.
- Na pasta assets dentro de src podemos colocar arquivos estáticos como imagens, 
logo da nossa aplicação e etc.
- Na pasta environments temos os arquivos onde podemos definir variáveis de ambiente.
- Outro  arquivo extremamente importante é o index.html que fica dentro da pasta src,
pois ele representa toda a nossa single page aplication.
- Quando definimos um seletor para um determinado componente, então passamos a 
referenciar dentro do html a partir desse seletor.

Instalação da dependência do Material Design

- cd frontend/
- ng add @angular/material
- Set up global Angular Material typography styles? (y/N) responder: yes
- Acima está perguntando se desejamos aplicar a tipografia do Material para
todo o projeto.
- Set up browser animations for Angular Material? (Y/n) responder: yes
- Com relação as animações responder que sim.

Implementação do componente header (Cabeçalho da página) 

- A partir do momento que instalamos o Material Design a fonte é considerada 
de forma global.

- Com o comando ng generate component geramos um novo componente ou também
podemos usar o comando de forma abreviada: ng g c

- Vamos criar o componente header da seguinte forma: ng g c components/template/header, 
foi passado o caminho e dentro desse caminho será colocado o componente header, se o caminho
não existe então ele é criado de forma automática.

- Depois do componente criado ele é registrado automaticamente dentro do módulo.

- MacBook-Air-de-Julio:frontend julio$ ng g c components/template/header
- Abaixo está o log do terminal com as ações realizadas após a execução do comando.

CREATE src/app/components/template/header/header.component.css (0 bytes)
CREATE src/app/components/template/header/header.component.html (21 bytes)
CREATE src/app/components/template/header/header.component.ts (275 bytes)
UPDATE src/app/app.module.ts (703 bytes)

-  Foram criados três arquivos de forma automática, os arquivos css, html e ts, além
disso esses arquivos foram registrados dentro do módulo de forma automática.

- Para os três arquivos serem criados de forma automática é necessário estar usando
template e estilo externos, ou seja, sem ser inline, por isso devemos setar as opções
conforme abaixo dentro do arquivo angular.json.

          "inlineTemplate": false,
          "inlineStyle": false,

- Agora precisamos começar a trabalhar em nosso template que é o nosso header, 
sendo que o arquivo se chama header.component.html

- Para o nosso template vamos importar a toolbar do Material Design da seguinte forma:
   
    /* Importação dos módulos do Material Design */
       import { MatToolbarModule } from '@angular/material/toolbar';

Implementação do componente footer (Rodapé da página) 
    
- Criamos o componente footer com o seguinte comando:
  g g c components/template/footer

- Saída do resultado do comando:

  MacBook-Air-de-Julio:CursoAngular9Coder julio$ cd frontend/
  MacBook-Air-de-Julio:frontend julio$ ng g c components/template/footer
  CREATE src/app/components/template/footer/footer.component.css (0 bytes)
  CREATE src/app/components/template/footer/footer.component.html (21 bytes)
  CREATE src/app/components/template/footer/footer.component.ts (275 bytes)
  UPDATE src/app/app.module.ts (1057 bytes)  

- Temos um arquivo css que atua de forma global dentro da aplicação que se 
chama styles.css e fica dentro da pasta src.

Criação do componente de navegação

- Abaixo criamos um componente de navegação chamado nav.

MacBook-Air-de-Julio:CursoAngular9Coder julio$ cd frontend/
MacBook-Air-de-Julio:frontend julio$ ng g c components/template/nav
CREATE src/app/components/template/nav/nav.component.css (0 bytes)
CREATE src/app/components/template/nav/nav.component.html (18 bytes)
CREATE src/app/components/template/nav/nav.component.ts (263 bytes)
UPDATE src/app/app.module.ts (1147 bytes)

Elementos do Angular

- Componentes
- Diretivas
- Rotas
- Pipes
- Observables (framework rxjs)
- Services 
- Injeção de dependência
- Binds de eventos, de propriedade...

- É importante entender como navegar entre os componentes.
- Pipes são processamentos que conseguimos fazer dentro da página.
- Um componente é formado por via de regra por três partes.
- Um componente pode não ter estilo (css) aplicado, simplesmente pode ter apenas
o html e o typescript.
- Não é obrigatório ter o html em um arquivo separado, ele pode ficar dentro do 
arquivo typescript caso queira usar inline.
- Existe como se fosse um mundo dentro do componente, se um estilo for aplicado 
ele servirá apenas para o componente.

Attribute Directives (Diretiva de Atributo)

- Altera a aparência e o comportamento de um elemento, componente ou outra diretiva.
- Foca em duas coisas: alterar a aparência e o comportamento.
- A parte de aparência diz a respeito de mexer no css por exemplo.
- A parte de comportamento quer dizer que colocamos uma diretiva dentro de um 
determinado botão e essa diretiva faz com que seja feita uma chamada pro backend, ou
uma chamada ajax para  o backend da aplicação.

- Podemos criar uma diretiva pela ferramenta de linha de comando (CLI).
- Decorator é um padrão de projetos que tem como objetivo evitar herança, em
vez de ter herança se trabalha com composição para estender um determinado objeto.
- Decorator são os @AlgumaCoisa que o Angular usa para definir que uma classe exerce
algum tipo de papél dentro do framework.
- Se queremos que uma classe seja um componente então colocamos o @Component.
- Se queremos que uma classe seja uma diretiva então colocamos o @Directive.
- Podemos usar seletores como atributo em tags do html.
- Uma diretiva de atributo consegue alterar o estilo e o comportamento.

Structural Directive (Diretiva de Estrutura)

- Altera o layout adicionando e removendo elementos da DOM.
- Uma diretiva estrutural tem um asterísco na frente, por exemplo: *ngIf, 
ou *ngFor, podemos usar essas diretivas de condicional ou de laço de repetição
para exibir ou suprimir conteúdo, por exemplo mostrar um formulário na DOM
somente se um produto estiver setado.

Property Binding (Ligação de Propriedade)

- Quando queremos pegar informações que estão em um componente, podemos 
imaginar um componente como uma pequena aplicação, como uma aplicação deve
haver comunicação entre o arquivo typescript e o arquivo html, o css vai 
ser automaticamente aplicado dentro do html, no caso do css basta apenas 
aplicar os estilos através dos seletores.
- Por exemplo para acessar um array de produtos no html precisamos de ter
algum tipo de sintaxe para dizer que irá acessar o array produtos que está
dentro do componente, para isso devemos criar uma variável entre colchetes
dentro de uma tag qualquer, por exemplo:
    <table> 
      [dataSource]="products"
    </table>
- No exemplo acima será buscado por uma variável de nome products no arquivo
typescript externo.
- Binding significa ligação, para realizar uma ligação é necessário usar 
colchetes ligados a um atributo dentro do html.

Event Binding (Ligação de Evento)

-xxx.